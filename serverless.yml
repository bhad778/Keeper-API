service: pare
app: pare
org: jobfindingapp778

frameworkVersion: "2"

provider:
  name: aws
  runtime: nodejs12.x
  websocketsApiName: job-app-websockets-api
  websocketsApiRouteSelectionExpression: $request.body.action # custom routes are selected by the value of the action property in the body
  environment:
    keeperImageUploadBucket: ${self:custom.keeperImageUploadBucket}
    region: ${self:provider.region}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:*
      Resource: "*"

region: us-east-1

plugins:
  - serverless-offline

custom:
  keeperImageUploadBucket: keeper-image-upload-bucket

resources:
  Resources:
    KeeperImageUploadBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.keeperImageUploadBucket}
        AccessControl: PublicRead

functions:
  imageUpload:
    handler: functions/misc.imageUpload
    events:
      - http:
          path: imageUpload
          method: post
          cors: true
  addCognitoUserToMongoDb:
    handler: functions/users.addCognitoUserToMongoDb
    events:
      - http:
          path: addCognitoUserToMongoDb
          method: post
          cors: true
  match:
    handler: functions/users.match
    events:
      - http:
          path: match
          method: post
          cors: true
  getMatches:
    handler: functions/users.getMatches
    events:
      - http:
          path: getMatches
          method: post
          cors: true
  addEmployer:
    handler: functions/users.addEmployer
    events:
      - http:
          path: addEmployer
          method: post
          cors: true
  addEmployee:
    handler: functions/users.addEmployee
    events:
      - http:
          path: addEmployee
          method: post
          cors: true
  getEmployee:
    handler: functions/users.getEmployee
    events:
      - http:
          path: getEmployee
          method: post
          cors: true
  getEmployeesForSwiping:
    handler: functions/users.getEmployeesForSwiping
    events:
      - http:
          path: getEmployeesForSwiping
          method: post
          cors: true
  getEmployer:
    handler: functions/users.getEmployer
    events:
      - http:
          path: getEmployer
          method: post
          cors: true
  getEmployerData:
    handler: functions/users.getEmployerData
    events:
      - http:
          path: getEmployerData
          method: post
          cors: true
  recordJobsSwipes:
    handler: functions/jobs.recordJobsSwipes
    events:
      - http:
          path: recordJobsSwipes
          method: post
          cors: true
  addJob:
    handler: functions/jobs.addJob
    events:
      - http:
          path: addJob
          method: post
          cors: true
  editJob:
    handler: functions/jobs.editJob
    events:
      - http:
          path: editJob
          method: post
          cors: true
  getJobs:
    handler: functions/jobs.getJobs
    events:
      - http:
          path: getJobs
          method: post
          cors: true
  getEmployersJobs:
    handler: functions/jobs.getEmployersJobs
    events:
      - http:
          path: getEmployersJobs
          method: post
          cors: true
  addConversation:
    handler: functions/conversations.addConversation
    events:
      - http:
          path: addConversation
          method: post
          cors: true
  getConversation:
    handler: functions/conversations.getConversation
    events:
      - http:
          path: getConversation
          method: post
          cors: true
  getConversationMessages:
    handler: functions/conversations.getConversationMessages
    events:
      - http:
          path: getConversationMessages
          method: post
          cors: true
  addMessage:
    handler: functions/conversations.addMessage
    events:
      - http:
          path: addMessage
          method: post
          cors: true
  wsConnectHandler:
    handler: functions/conversations.wsConnectHandler
    events:
      - websocket:
          route: $connect
  wsDisconnectHandler:
    handler: functions/conversations.wsDisconnectHandler
    events:
      - websocket:
          route: $disconnect
  wsDefaultHandler:
    handler: functions/conversations.wsDefaultHandler
    events:
      - websocket: $default #simple event definition without extra route property
  webSocketOnMessageHandler:
    handler: functions/conversations.webSocketOnMessageHandler
    events:
      - websocket:
          route: onMessage # will trigger if $request.body.action === "onMessage"
